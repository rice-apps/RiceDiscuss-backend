input _idOperatorsFilterCommentInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindManyCommentInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindManyPostInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOnePostInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterPostInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

type Comment {
  creator(skip: Int, sort: SortFindOneUserInput): User
  post: PostInterface
  parent: Comment
  date_created: Date
  body: String!
  depth: Float!
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  _id: MongoID!
  children: [Comment]
}

# A connection to a list of items.
type CommentConnection {
  # Total object count.
  count: Int!
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # Information to aid in pagination.
  edges: [CommentEdge!]!
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge
  node: Comment!
  # A cursor for use in pagination
  cursor: String!
}

input CreateOneCommentInput {
  creator: String!
  post: MongoID!
  parent: MongoID
  date_created: Date
  body: String!
  depth: Float!
  upvotes: [String]
  downvotes: [String]
  reports: [String]
}

type CreateOneCommentPayload {
  # Created document ID
  recordId: MongoID
  # Created document
  record: Comment
}

input CreateOnePostInput {
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind!
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator: String!
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  imageUrl: String
  _id: MongoID
  start: Date
  end: Date
  place: String
  isPaid: Boolean
  isClosed: Boolean
  deadline: Date
}

type CreateOnePostPayload {
  # Created document ID
  recordId: MongoID
  # Created document
  record: PostInterface
}

scalar Date

input Date_createdOperatorsFilterCommentInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_createdOperatorsFilterFindManyCommentInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_createdOperatorsFilterFindManyPostInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_createdOperatorsFilterFindOnePostInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_createdOperatorsFilterPostInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_joinedOperatorsFilterFindManyUserInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_joinedOperatorsFilterFindOneUserInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_joinedOperatorsFilterRemoveOneUserInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input Date_joinedOperatorsFilterUpdateOneUserInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

type Discussion implements PostInterface {
  _id: MongoID!
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  comments: [Comment]
}

enum EnumDKeyPostKind {
  Discussion
  Notice
  Event
  Job
}

enum EnumUserCollege {
  Baker
  Will_Rice
  Hanszen
  Wiess
  Jones
  Brown
  Lovett
  Sid_Richardson
  Martel
  McMurtry
  Duncan
}

type Event implements PostInterface {
  _id: MongoID!
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  start: Date!
  end: Date!
  place: String
  comments: [Comment]
}

input FilterCommentInput {
  creator: String
  post: MongoID
  parent: MongoID
  date_created: Date
  body: String
  depth: Float
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterCommentInput
  OR: [FilterCommentInput!]
  AND: [FilterCommentInput!]
}

input FilterFindManyCommentInput {
  creator: String
  post: MongoID
  parent: MongoID
  date_created: Date
  body: String
  depth: Float
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterFindManyCommentInput
  OR: [FilterFindManyCommentInput!]
  AND: [FilterFindManyCommentInput!]
}

input FilterFindManyPostInput {
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String
  body: String
  date_created: Date
  tags: [String]
  creator: String
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  imageUrl: String
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterFindManyPostInput
  OR: [FilterFindManyPostInput!]
  AND: [FilterFindManyPostInput!]
}

input FilterFindManyUserInput {
  username: String
  netID: String
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts: [MongoID]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterFindManyUserInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

input FilterFindOnePostInput {
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String
  body: String
  date_created: Date
  tags: [String]
  creator: String
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  imageUrl: String
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterFindOnePostInput
  OR: [FilterFindOnePostInput!]
  AND: [FilterFindOnePostInput!]
}

input FilterFindOneUserInput {
  username: String
  netID: String
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts: [MongoID]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterFindOneUserInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

input FilterPostInput {
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String
  body: String
  date_created: Date
  tags: [String]
  creator: String
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  imageUrl: String
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterPostInput
  OR: [FilterPostInput!]
  AND: [FilterPostInput!]
}

input FilterRemoveOneUserInput {
  username: String
  netID: String
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts: [MongoID]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterRemoveOneUserInput
  OR: [FilterRemoveOneUserInput!]
  AND: [FilterRemoveOneUserInput!]
}

input FilterUpdateOneUserInput {
  username: String
  netID: String
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts: [MongoID]
  _id: MongoID
  _ids: [MongoID]
  # List of *indexed* fields that can be filtered via operators.
  _operators: OperatorsFilterUpdateOneUserInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

type Job implements PostInterface {
  _id: MongoID!
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  start: Date!
  end: Date!
  place: String!
  isPaid: Boolean!
  isClosed: Boolean!
  comments: [Comment]
}

# The `ID` scalar type
 represents a unique MongoDB identifier in collection.
# MongoDB by default use 12-byte ObjectId value
# (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
# also may accepts string or integer as correct values for _id field.
scalar MongoID

type Mutation {
  # Create one document with mongoose defaults, setters, hooks and validation
  commentCreateOne(record: CreateOneCommentInput!): CreateOneCommentPayload
  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  # mongoose document. 3) Mongoose applies defaults, setters, hooks and
  # validation. 4) And save it.
  commentUpdateById(record: UpdateByIdCommentInput!): UpdateByIdCommentPayload
  upvoteCommentById(_id: ID, netID: String!): Comment
  downvoteCommentById(_id: ID!, netID: String!): Comment
  toggleCommentReport(_id: ID!, netID: String!): Comment
  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  commentRemoveById(_id: MongoID!): RemoveByIdCommentPayload
  # Create one document with mongoose defaults, setters, hooks and validation
  postCreateOne(record: CreateOnePostInput!): CreateOnePostPayload
  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  # mongoose document. 3) Mongoose applies defaults, setters, hooks and
  # validation. 4) And save it.
  postUpdateById(record: UpdateByIdPostInput!): UpdateByIdPostPayload
  upvotePostById(_id: ID!, netID: String!): PostInterface
  downvotePostById(_id: ID!, netID: String!): PostInterface
  togglePostReport(_id: ID!, netID: String!): PostInterface
  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  postRemoveById(_id: MongoID!): RemoveByIdPostPayload
  userAuthentication(ticket: String!): User
  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  # mongoose document. 3) Mongoose applies defaults, setters, hooks and
  # validation. 4) And save it.
  userUpdateOne(
    record: UpdateOneUserInput!
    # Filter by fields
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload
  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  userRemoveOne(
    # Filter by fields
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload
  signS3Url(filename: String!, filetype: String!): S3Payload
}

input NetIDOperatorsFilterFindManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NetIDOperatorsFilterFindOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NetIDOperatorsFilterRemoveOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NetIDOperatorsFilterUpdateOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

type Notice implements PostInterface {
  _id: MongoID!
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  deadline: Date!
  comments: [Comment]
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterCommentInput {
  date_created: Date_createdOperatorsFilterCommentInput
  _id: _idOperatorsFilterCommentInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterFindManyCommentInput {
  date_created: Date_createdOperatorsFilterFindManyCommentInput
  _id: _idOperatorsFilterFindManyCommentInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterFindManyPostInput {
  date_created: Date_createdOperatorsFilterFindManyPostInput
  _id: _idOperatorsFilterFindManyPostInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterFindManyUserInput {
  username: UsernameOperatorsFilterFindManyUserInput
  netID: NetIDOperatorsFilterFindManyUserInput
  token: TokenOperatorsFilterFindManyUserInput
  date_joined: Date_joinedOperatorsFilterFindManyUserInput
  _id: _idOperatorsFilterFindManyUserInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterFindOnePostInput {
  date_created: Date_createdOperatorsFilterFindOnePostInput
  _id: _idOperatorsFilterFindOnePostInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterFindOneUserInput {
  username: UsernameOperatorsFilterFindOneUserInput
  netID: NetIDOperatorsFilterFindOneUserInput
  token: TokenOperatorsFilterFindOneUserInput
  date_joined: Date_joinedOperatorsFilterFindOneUserInput
  _id: _idOperatorsFilterFindOneUserInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterPostInput {
  date_created: Date_createdOperatorsFilterPostInput
  _id: _idOperatorsFilterPostInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterRemoveOneUserInput {
  username: UsernameOperatorsFilterRemoveOneUserInput
  netID: NetIDOperatorsFilterRemoveOneUserInput
  token: TokenOperatorsFilterRemoveOneUserInput
  date_joined: Date_joinedOperatorsFilterRemoveOneUserInput
  _id: _idOperatorsFilterRemoveOneUserInput
}

# For performance reason this type contains only *indexed* fields.
input OperatorsFilterUpdateOneUserInput {
  username: UsernameOperatorsFilterUpdateOneUserInput
  netID: NetIDOperatorsFilterUpdateOneUserInput
  token: TokenOperatorsFilterUpdateOneUserInput
  date_joined: Date_joinedOperatorsFilterUpdateOneUserInput
  _id: _idOperatorsFilterUpdateOneUserInput
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements PostInterface {
  _id: MongoID!
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  comments: [Comment]
}

# A connection to a list of items.
type PostConnection {
  # Total object count.
  count: Int!
  # Information to aid in pagination.
  pageInfo: PageInfo!
  edges: [PostEdge!]!
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: PostInterface!
  # A cursor for use in pagination
  cursor: String!
}

interface PostInterface {
  _id: MongoID!
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String!
  body: String!
  date_created: Date
  tags: [String]
  creator(skip: Int, sort: SortFindOneUserInput): User
  upvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  downvotes(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User!]
  imageUrl: URL
  comments: [Comment]
}

type Query {
  commentById(_id: MongoID!): Comment
  commentByParent(parent: ID): [Comment]
  commentByPost(post: ID): [Comment]
  commentCount(
    # Filter by fields
    filter: FilterCommentInput
  ): Int
  commentConnection(
    # Forward pagination argument for returning at most first edges
    first: Int
    # Forward pagination argument for returning at most first edges
    after: String
    # Backward pagination argument for returning at most last edges
    last: Int
    # Backward pagination argument for returning at most last edges
    before: String
    # Filter by fields
    filter: FilterFindManyCommentInput
    # Sort argument for data ordering
    sort: SortConnectionCommentEnum = _ID_DESC
  ): CommentConnection
  postById(_id: MongoID!): PostInterface
  postOne(
    # Filter by fields
    filter: FilterFindOnePostInput
    skip: Int
    sort: SortFindOnePostInput
  ): PostInterface
  postCount(
    # Filter by fields
    filter: FilterPostInput
  ): Int
  postConnection(
    # Forward pagination argument for returning at most first edges
    first: Int
    # Forward pagination argument for returning at most first edges
    after: String
    # Backward pagination argument for returning at most last edges
    last: Int
    # Backward pagination argument for returning at most last edges
    before: String
    # Filter by fields
    filter: FilterFindManyPostInput
    # Sort argument for data ordering
    sort: SortConnectionPostEnum = _ID_DESC
  ): PostConnection
  userOne(
    # Filter by fields
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userConnection(
    # Forward pagination argument for returning at most first edges
    first: Int
    # Forward pagination argument for returning at most first edges
    after: String
    # Backward pagination argument for returning at most last edges
    last: Int
    # Backward pagination argument for returning at most last edges
    before: String
    # Filter by fields
    filter: FilterFindManyUserInput
    # Sort argument for data ordering
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  doesUsernameExist(username: String!): UsernameExistsPayload
}

type RemoveByIdCommentPayload {
  # Removed document ID
  recordId: MongoID
  # Removed document
  record: Comment
}

type RemoveByIdPostPayload {
  # Removed document ID
  recordId: MongoID
  # Removed document
  record: PostInterface
}

type RemoveOneUserPayload {
  # Removed document ID
  recordId: MongoID
  # Removed document
  record: User
}

type S3Payload {
  signedRequest: URL!
  url: URL!
}

enum SortConnectionCommentEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionPostEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
  USERNAME_DESC
  USERNAME_ASC
  NETID_DESC
  NETID_ASC
  TOKEN_DESC
  TOKEN_ASC
}

enum SortFindByIdsPostInput {
  _ID_ASC
  _ID_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NETID_ASC
  NETID_DESC
  TOKEN_ASC
  TOKEN_DESC
  DATE_JOINED_ASC
  DATE_JOINED_DESC
}

enum SortFindOnePostInput {
  _ID_ASC
  _ID_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NETID_ASC
  NETID_DESC
  TOKEN_ASC
  TOKEN_DESC
  DATE_JOINED_ASC
  DATE_JOINED_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NETID_ASC
  NETID_DESC
  TOKEN_ASC
  TOKEN_DESC
  DATE_JOINED_ASC
  DATE_JOINED_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NETID_ASC
  NETID_DESC
  TOKEN_ASC
  TOKEN_DESC
  DATE_JOINED_ASC
  DATE_JOINED_DESC
}

type Subscription {
  commentCreated: Comment
  commentUpdated: Comment
  commentVoteChanged: Comment
  commentReported: Comment
  commentRemoved: Comment
  postCreated: PostInterface
  postUpdated: PostInterface
  postVoteChanged: PostInterface
  postReported: PostInterface
  postRemoved: PostInterface
  profileCreated: User
  profileUpdated: User
  profileRemoved: User
}

input TokenOperatorsFilterFindManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input TokenOperatorsFilterFindOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input TokenOperatorsFilterRemoveOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input TokenOperatorsFilterUpdateOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input UpdateByIdCommentInput {
  creator: String
  post: MongoID
  parent: MongoID
  date_created: Date
  body: String
  depth: Float
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  _id: MongoID!
}

type UpdateByIdCommentPayload {
  # Updated document ID
  recordId: MongoID
  # Updated document
  record: Comment
}

input UpdateByIdPostInput {
  # The type of the post (whether event, discussion, or notice)
  kind: EnumDKeyPostKind
  title: String
  body: String
  date_created: Date
  tags: [String]
  creator: String
  upvotes: [String]
  downvotes: [String]
  reports: [String]
  imageUrl: String
  _id: MongoID!
  start: Date
  end: Date
  place: String
  isPaid: Boolean
  isClosed: Boolean
  deadline: Date
}

type UpdateByIdPostPayload {
  # Updated document ID
  recordId: MongoID
  # Updated document
  record: PostInterface
}

input UpdateOneUserInput {
  username: String
  netID: String
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts: [MongoID]
}

type UpdateOneUserPayload {
  # Updated document ID
  recordId: MongoID
  # Updated document
  record: User
}

# Represents a URL as specified in RFC 3986
scalar URL

type User {
  username: String!
  netID: String!
  token: String
  date_joined: Date
  college: EnumUserCollege
  major: [String]
  minor: [String]
  isNewUser: Boolean
  savedPosts(limit: Int = 1000, sort: SortFindByIdsPostInput): [PostInterface]
  _id: MongoID!
  posts: [PostInterface]
  comments: [Comment]
}

# A connection to a list of items.
type UserConnection {
  # Total object count.
  count: Int!
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # Information to aid in pagination.
  edges: [UserEdge!]!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User!
  # A cursor for use in pagination
  cursor: String!
}

type UsernameExistsPayload {
  usernameExists: Boolean!
}

input UsernameOperatorsFilterFindManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input UsernameOperatorsFilterFindOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input UsernameOperatorsFilterRemoveOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input UsernameOperatorsFilterUpdateOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

